/**
 * Preferences.test.jsx
 *
 * This test suite validates the Preferences component, which allows users to
 * view, toggle, and persist user preferences (Dark Mode, Notifications, Canvas Integration)
 * using Chrome Extension APIs.
 *
 * Features tested:
 * - Rendering of user data and preference checkboxes
 * - Toggling individual preferences using checkboxes
 * - Saving preferences to chrome.storage
 * - Viewing saved preferences via chrome.runtime messaging
 * - Fallback behavior when no preferences are found
 * 
 * CODE AND DOCUMENTATION GENERATED BY CHATGPT 4o
 * Authored by: Sebastian Yepez
 * 
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import Preferences from '../components/Preferences';
import '@testing-library/jest-dom';

/**
 * Mocks for Chrome Extension APIs:
 * - chrome.storage.sync.set: Saves user preferences
 * - chrome.runtime.sendMessage: Fetches stored preferences
 */
global.chrome = {
  storage: {
    sync: {
      set: jest.fn((data, callback) => callback && callback()),
    },
  },
  runtime: {
    sendMessage: jest.fn(),
  },
};

// Mock alert globally
beforeEach(() => {
  jest.clearAllMocks();
  global.alert = jest.fn();
});

// Mock user and preference props
const mockUser = {
  name: 'Jane Doe',
  email: 'jane@example.com',
  picture: 'https://example.com/jane.jpg',
};

const mockPreferences = {
  darkMode: false,
  notifications: true,
  canvasIntegration: false,
};

describe('Preferences Component', () => {
  /**
   * Test: Component renders user info and all preference checkboxes
   */
  test('renders user info and preference checkboxes', () => {
    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={jest.fn()} />);

    expect(screen.getByText('Jane Doe')).toBeInTheDocument();
    expect(screen.getByText('jane@example.com')).toBeInTheDocument();
    expect(screen.getByLabelText(/Enable Dark Mode/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Enable Notifications/i)).toBeChecked(); // default true
    expect(screen.getByLabelText(/Enable Canvas Integration/i)).not.toBeChecked(); // default false
  });

  /**
   * Test: Toggling Dark Mode checkbox should call setPreferences
   */
  test('toggles a preference checkbox', () => {
    const setPreferencesMock = jest.fn();
    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={setPreferencesMock} />);

    const darkModeCheckbox = screen.getByLabelText(/Enable Dark Mode/i);
    fireEvent.click(darkModeCheckbox);

    expect(setPreferencesMock).toHaveBeenCalledWith(expect.any(Function));
  });

  /**
   * Test: Toggling Notifications checkbox should call setPreferences
   */
  test('toggles notifications checkbox', () => {
    const setPreferencesMock = jest.fn();
    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={setPreferencesMock} />);

    const notificationsCheckbox = screen.getByLabelText(/Enable Notifications/i);
    fireEvent.click(notificationsCheckbox);

    expect(setPreferencesMock).toHaveBeenCalledWith(expect.any(Function));
  });

  /**
   * Test: Toggling Canvas Integration checkbox should call setPreferences
   */
  test('toggles canvas integration checkbox', () => {
    const setPreferencesMock = jest.fn();
    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={setPreferencesMock} />);

    const canvasCheckbox = screen.getByLabelText(/Enable Canvas Integration/i);
    fireEvent.click(canvasCheckbox);

    expect(setPreferencesMock).toHaveBeenCalledWith(expect.any(Function));
  });

  /**
   * Test: Saving preferences triggers chrome.storage.sync.set and shows alert
   */
  test('saves preferences to chrome storage', () => {
    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={jest.fn()} />);

    fireEvent.click(screen.getByText(/Save Preferences/i));

    expect(chrome.storage.sync.set).toHaveBeenCalledWith(
      { preferences: mockPreferences },
      expect.any(Function)
    );
    expect(global.alert).toHaveBeenCalledWith('Preferences saved!');
  });

  /**
   * Test: Displays preferences fetched via chrome.runtime.sendMessage
   */
  test('displays user preferences from chrome.runtime response', async () => {
    chrome.runtime.sendMessage.mockImplementation((msg, callback) => {
      callback({
        preferences: {
          darkMode: true,
          notifications: false,
          canvasIntegration: true,
        },
      });
    });

    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={jest.fn()} />);
    fireEvent.click(screen.getByText(/View Preferences/i));

    await waitFor(() => {
      expect(global.alert).toHaveBeenCalledWith(expect.stringContaining('Dark Mode: Enabled'));
      expect(global.alert).toHaveBeenCalledWith(expect.stringContaining('Notifications: Disabled'));
      expect(global.alert).toHaveBeenCalledWith(expect.stringContaining('Canvas Integration: Enabled'));
    });
  });

  /**
   * Test: Displays fallback alert when no preferences are found
   */
  test('displays fallback alert if no preferences found', async () => {
    chrome.runtime.sendMessage.mockImplementation((msg, callback) => {
      callback(null); // simulate empty response
    });

    render(<Preferences user={mockUser} preferences={mockPreferences} setPreferences={jest.fn()} />);
    fireEvent.click(screen.getByText(/View Preferences/i));

    await waitFor(() => {
      expect(global.alert).toHaveBeenCalledWith('No preferences saved.');
    });
  });
});
