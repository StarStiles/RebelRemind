/**
 * NotificationToggle.test.jsx
 *
 * This test suite validates the behavior of the `NotificationToggle` component,
 * which provides a user interface element to enable or disable notifications
 * within the Rebel Remind Chrome extension.
 *
 * Covered Features:
 * - Renders the toggle switch without crashing
 * - Displays the correct icon state (on or off) based on the `enabled` prop
 * - Reflects the correct `aria-checked` accessibility attribute
 * - Calls the provided `setEnabled` callback with the correct value when toggled
 * - Correctly handles toggle behavior from both `true → false` and `false → true`
 *
 * The component uses `react-switch` for its toggle UI, which exposes the switch
 * element via the `role="switch"` attribute, allowing for straightforward accessibility testing.
 *
 * DOCUMENTATION GENERATED BY CHATGPT 4o
 * Authored by: Billy Estrada
 */

import React from "react";
import { render, fireEvent } from "@testing-library/react";
import NotificationToggle from "../components/NotificationToggle";

describe("NotificationToggle Component", () => {
    it("renders without crashing", () => {
        const { getByRole } = render(
            <NotificationToggle enabled={false} setEnabled={() => {}} />
        );
        expect(getByRole("switch")).toBeInTheDocument();
    });

    it("displays the correct icon when enabled is false", () => {
        const { getByRole } = render(
            <NotificationToggle enabled={false} setEnabled={() => {}} />
        );
        const switchHandle = getByRole("switch");
        expect(switchHandle).toHaveAttribute("aria-checked", "false");
    });

    it("displays the correct icon when enabled is true", () => {
        const { getByRole } = render(
            <NotificationToggle enabled={true} setEnabled={() => {}} />
        );
        const switchHandle = getByRole("switch");
        expect(switchHandle).toHaveAttribute("aria-checked", "true");
    });

    it("calls setEnabled with the correct value when toggled", () => {
        const setEnabledMock = jest.fn();
        const { getByRole } = render(
            <NotificationToggle enabled={false} setEnabled={setEnabledMock} />
        );
        const switchHandle = getByRole("switch");
        fireEvent.click(switchHandle);
        expect(setEnabledMock).toHaveBeenCalledWith(true);
    });

    it("toggles from true to false when clicked", () => {
        const setEnabledMock = jest.fn();
        const { getByRole } = render(
            <NotificationToggle enabled={true} setEnabled={setEnabledMock} />
        );
        const switchHandle = getByRole("switch");
        fireEvent.click(switchHandle);
        expect(setEnabledMock).toHaveBeenCalledWith(false);
    });
});