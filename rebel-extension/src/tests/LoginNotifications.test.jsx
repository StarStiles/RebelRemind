/**
 * LoginNotificationPage.test.jsx
 *
 * This test suite validates the behavior of the `LoginNotificationPage`, which serves
 * as the notification opt-in step during the Rebel Remind onboarding process.
 * 
 * Covered Features:
 * - Renders the notification setup page when authenticated
 * - Displays a login prompt if the user is not authenticated
 * - Navigates to the Preferences setup page when "Continue" is clicked
 * 
 * The `useAuth` hook is mocked to control authentication state,
 * and the `chrome.storage.sync` API is mocked to prevent errors
 * during testing outside of the Chrome Extension environment.
 * 
 * Author: Billy Estrada
 * Documentation generated by ChatGPT 4o
 */

import React from 'react';
import LoginNotificationPage from '../pages/LoginNotificationPage';
import '@testing-library/jest-dom';
import { render, screen, fireEvent } from '@testing-library/react';
import { MemoryRouter, Routes, Route } from 'react-router-dom';


beforeAll(() => {
  global.chrome = {
    storage: {
      sync: {
        get: jest.fn((key, callback) => {
          callback({ notificationsEnabled: true }); // or false, depending on your test
        }),
        set: jest.fn(),
      },
    },
  };
});


jest.mock('../../public/hooks/useAuth', () => ({
    __esModule: true,
    default: jest.fn()
  }));

jest.mock('../components/LoginButton', () => () => <div>LoginButton</div>);

import useAuth from '../../public/hooks/useAuth';

describe('NotificationLogin Page', () => {
    afterEach(() => {
        jest.clearAllMocks();
    });

    test('navigates to /setup-preferences when Continue is clicked', () => {
        useAuth.mockReturnValue(true);
      
        render(
          <MemoryRouter initialEntries={['/login-notification']}>
            <Routes>
              <Route path="/login-notification" element={<LoginNotificationPage />} />
              <Route path="/setup-preferences" element={<div>Preferences</div>} />
            </Routes>
          </MemoryRouter>
        );
      
        fireEvent.click(screen.getByText(/Continue/i));
        expect(screen.getByText(/Preferences/)).toBeInTheDocument();
      });      

    test('renders setup page when authenticated', () => {
        useAuth.mockReturnValue(true);

        render(
            <MemoryRouter>
                <LoginNotificationPage />
            </MemoryRouter>
        );

        expect(screen.getByText(/Enable notifications/i)).toBeInTheDocument();
        expect(screen.getByText(/Use RebelRemind to keep up to date/i)).toBeInTheDocument();
        expect(screen.getByText(/Continue/i)).toBeInTheDocument();
    });

    test('renders login prompt when not authenticated', () => {
        useAuth.mockReturnValue(false);

        render(
            <MemoryRouter>
                <LoginNotificationPage />
            </MemoryRouter>
        );

        expect(screen.getByText(/Before we get started/i)).toBeInTheDocument();
        expect(screen.getByText(/LoginButton/i)).toBeInTheDocument();
    });
});
