/**
 * SettingsPage Component
 *
 * This is the main interface for user configuration of the Rebel Remind extension.
 * It displays a categorized list of collapsible settings including:
 * - Account Login
 * - User Preferences
 * - Appearance Customization
 * - Canvas Integration
 * - Privacy Information
 * - About the Project
 *
 * Each section uses icons and dynamic content based on authentication state and user interactions.
 * 
 * Authored by: Sebastian Yepez
 * Documentation generated by ChatGPT
 *
 * @component
 * @returns {JSX.Element} A user-friendly interface for managing app settings.
 */

import { useState, useEffect } from 'react';
import {
    FaUser, FaBell, FaEye, FaLock, FaQuestionCircle, FaThumbsUp, FaBook
} from 'react-icons/fa';
import { useNavigate } from "react-router-dom";

import ColorPicker from '../components/ColorChanging';
import LoginButton from "../components/LoginButton";
import UserProfile from "../components/UserProfile";
import useAuth from "../../public/hooks/useAuth";
import CanvasTokenManager from "../components/CanvasTokenManager";
import Preferences from "../components/Preferences";
import './css/SettingsPage.css';

export default function SettingsPage() {
    const [openSection, setOpenSection] = useState(null); // Controls which accordion is expanded
    const isAuthenticated = useAuth(); // Determines if user is logged in
    const navigate = useNavigate(); // For navigation to home

    // Set all preferences to false initially
    const [preferences, setPreferences] = useState({
        academicCalendar: false,
        UNLVCalendar: false,
        involvementCenter: false,
        canvasIntegration: false,
        rebelCoverage: false,
        userEvents: false,
    });

    // Get all preferences from storage on page load
    useEffect(() => {
        chrome.storage.sync.get(['preferences'], (result) => {
            console.log("Loaded preferences:", result.preferences);
            if (result.preferences) {
                setPreferences(result.preferences);
            }
        });
    }, []);

    // Listen for updates on the preferences from storage
    useEffect(() => {
        function handleStorageChange(changes, area) {
            if (area === 'sync' && changes.preferences) {
                const newPrefs = changes.preferences.newValue;
                setPreferences((prev) => ({ ...prev, ...newPrefs }));
            }
        }
        chrome.storage.onChanged.addListener(handleStorageChange);
        return () => {
            chrome.storage.onChanged.removeListener(handleStorageChange);
        };
    }, []);

    /**
     * Toggle section visibility.
     * If the same section is clicked again, it collapses.
     * @param {string} key - Unique identifier for the section.
     */
    const toggleSection = (key) => {
        setOpenSection(openSection === key ? null : key);
    };

    /**
     * Settings panel content definition.
     * Each object corresponds to a collapsible group in the UI.
     */
    const settingsItems = [
        {
            key: 'account',
            icon: <FaUser />,
            label: 'Account',
            content: (
                <div>
                    <p>Log in to your account here.</p>
                    {isAuthenticated ? <UserProfile /> : <LoginButton />}
                </div>
            )
        },
        {
            key: 'preferences',
            icon: <FaThumbsUp />,
            label: 'Preferences',
            content: (
                <div>
                    <p>Set your event preferences.</p>
                    {isAuthenticated ?
                        <Preferences /> 
                        : <p>Please log in to your account to set your preferences.</p>
                    }
                </div>
            ),
        },
        {
            key: 'appearance',
            icon: <FaEye />,
            label: 'Appearance',
            content: (
                <div>
                    <p>Theme and layout options.</p>
                    <ColorPicker />
                </div>
            ),
        },
        preferences.canvasIntegration && {
            key: 'canvas',
            icon: <FaBook />,
            label: 'Canvas Integration',
            content: (
                <div>
                    <p>Your Canvas Integration PAT.</p>
                    {isAuthenticated ? (
                        <CanvasTokenManager />
                    ) : (
                        <p>Please log in to your account to link your Canvas account.</p>
                    )}
                </div>
            )
        },
        {
            key: 'userdata',
            icon: <FaLock />,
            label: 'Privacy and Your Data',
            content: (
                <div className='mb-2'>
                    <p>Learn more about where your data is stored.</p>
                    <small>
                        We believe your privacy is of the utmost importance. We utilize the Chrome Storage API to securely store your data
                        within your <b>Chrome browser</b> and across your Google Accounts via the Chrome Identity API. We do not store any
                        of your data within an external database.
                    </small>
                </div>
            )
        },
        {
            key: 'about',
            icon: <FaQuestionCircle />,
            label: 'About',
            content: (
                <div style={{ padding: '0.5rem 0' }}>
                    <p>Learn more about Rebel Remind</p>
                    <small>
                        Rebel Remind is a Chrome extension created by a small team of UNLV Computer Science students
                        for their Senior Design project. This tool is designed to improve student organization,
                        event reminders, and campus engagement.
                    </small>
                    <div style={{ marginTop: '1rem' }}>
                        <strong>Project Contributors:</strong>
                        <small>
                            <ul style={{ paddingLeft: '1.25rem', marginTop: '0.5rem' }}>
                                <li>Billy Estrada</li>
                                <li>Blaise Carillo</li>
                                <li>Chandni Mirpuri Silva</li>
                                <li>Frank Lopez</li>
                                <li>Gee Buchanan</li>
                                <li>Gunnar Dalton</li>
                                <li>Jeremy Besitula</li>
                                <li>Joshua Stiles</li>
                                <li>Kamila Kinel</li>
                                <li>Sebastian Yepez</li>
                            </ul>
                        </small>
                    </div>
                    <small style={{ marginTop: '1rem' }}>
                        View the project repository on{' '}
                        <a
                            href="https://github.com/UNLV-CS472-672/2025-S-GROUP3-RebelRemind"
                            target="_blank"
                            rel="noopener noreferrer"
                            style={{ color: '#646cff' }}
                        >
                            GitHub
                        </a>
                        .
                    </small>
                </div>
            )
        },
    ].filter(Boolean); // removes any `false` entries like when canvasIntegration is off

    return (
        <>
            {/* Navigation Back Button */}
            <div className="back-button-container">
                <button className="back-button" onClick={() => navigate("/")}>⇐</button>
            </div>

            <div className="settings-page-wrapper">

                {/* Page Title */}
                <div className="title-container">
                    <h4>Settings</h4>
                </div>

                {/* Settings Accordion UI */}
                <div className="settings-container">
                    {settingsItems.map(({ key, icon, label, content }) => (
                        <div key={key} className="settings-group">
                            <div
                                className={`settings-item ${openSection === key ? 'open' : ''}`}
                                onClick={() => toggleSection(key)}
                            >
                                <span className="icon">{icon}</span>
                                <span className="label">{label}</span>
                                <span className={`arrow ${openSection === key ? 'rotated' : ''}`}>›</span>
                            </div>
                            {openSection === key && (
                                <div className="settings-content">
                                    {content}
                                </div>
                            )}
                        </div>
                    ))}
                </div>
            </div>
        </>
    );
}
