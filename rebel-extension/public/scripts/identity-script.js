/**
 * Identity Script for Handling Google Authentication in Chrome Extension
 *
 * This script uses the Chrome Identity API to authenticate users via Google.
 * It listens for authentication requests, retrieves an OAuth token, and fetches
 * user information from the Google People API.
 */

/**
 * Authenticates the user via Google OAuth using the Chrome Identity API.
 * 
 * - Requests an OAuth 2.0 access token.
 * - Uses the token to fetch user profile information.
 * - Sends the user data back to the requesting script.
 * 
 * Authored by: Sebastian Yepez
 * 
 * Documentation generated by ChatGPT
 * 
 * @param {Function} sendResponse - Callback function to send authentication results back to the requester.
 * @returns {boolean} - Returns `true` to keep the message channel open for async response handling.
 */
function authenticateUser(sendResponse) {
    chrome.identity.getAuthToken({ interactive: true }, (token) => {
        if (chrome.runtime.lastError) {
            console.error("Authentication Error:", chrome.runtime.lastError.message);
            sendResponse({ success: false, error: chrome.runtime.lastError.message });
            return;
        }

        console.log("Access Token:", token);

        // Fetch user information from Google OAuth API
        fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
            headers: { Authorization: `Bearer ${token}` },
        })
        .then((response) => response.json())
        .then((userInfo) => {
            console.log("User Info:", userInfo);
            sendResponse({ success: true, user: userInfo });
        })
        .catch((error) => {
            console.error("Error fetching user info:", error);
            sendResponse({ success: false, error: "Failed to fetch user info" });
        });
    });

    return true; // Keeps the message channel open for async response handling
}

/**
 * Listens for messages sent from the popup or other extension scripts.
 * 
 * Handles:
 * - `"LOGIN"`: Calls `authenticateUser()` to initiate Google login.
 * 
 * @param {Object} request - The message request object.
 * @param {string} request.type - The type of request (e.g., `"LOGIN"`).
 * @param {Object} sender - Information about the sender of the message.
 * @param {Function} sendResponse - Callback function to send the response back.
 * 
 * @returns {boolean} - Returns `true` to keep the message channel open for async response handling.
 */
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.type === "LOGIN") {
        authenticateUser(sendResponse);
        return true;
    }
});
