import { useEffect, useState } from "react";

/**
 * Custom React Hook: useAuth
 *
 * Manages user authentication state by checking Chrome Storage and listening for changes.
 * - Requests authentication status from the background script (`background.js`).
 * - Listens for Chrome Storage changes to update authentication state in real-time.
 * 
 * Authored by: Sebastian Yepez
 * 
 * Documentation generated by ChatGPT
 *
 * @returns {boolean} isAuthenticated - Whether the user is currently logged in.
 */
const useAuth = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);

    useEffect(() => {
        /**
         * Requests authentication status from `background.js`
         * Sends a message to check if a user is authenticated.
         */
        chrome.runtime.sendMessage({ type: "CHECK_AUTH" }, (response) => {
            if (response) {
                setIsAuthenticated(response.isAuthenticated);
            }
        });

        /**
         * Event Listener: Detects changes in Chrome Storage
         * Updates the authentication state if the "user" key changes.
         *
         * @param {Object} changes - Object containing the storage changes.
         * @param {string} area - The type of storage area changed (e.g., "sync").
         */
        const handleStorageChange = (changes, area) => {
            if (area === "sync" && changes.user) {
                setIsAuthenticated(!!changes.user.newValue); // Converts newValue to boolean
            }
        };

        // Subscribe to storage changes (With the listener, the UI stays in sync with storage changes automatically)
        chrome.storage.onChanged.addListener(handleStorageChange);

        // Cleanup function: Remove listener when component unmounts
        return () => {
            chrome.storage.onChanged.removeListener(handleStorageChange);
        };
    }, []);

    return isAuthenticated;
};

export default useAuth;
